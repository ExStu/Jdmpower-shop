// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  email    String @unique
  password String

  isAdmin Boolean @default(false) @map("is_admin")

  name       String @unique
  avatarPath String @default("/uploads/default-avatar.png") @map("avatar_path")

  phone String @default("")

  orders    Order[]
  reviews   Review[]
  favorites Product[]
}

model Product {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name        String   @unique
  slug        String   @unique
  sku         String   @unique
  description String
  price       Int
  images      String[]
  inStock     Boolean
  discount    Decimal

  orderItems OrderItem[]
  reviews    Review[]

  category   Category? @relation(fields: [categoryId], references: [id])
  categoryId Int?      @map("category_id")

  manufacture   Manufacture? @relation(fields: [manufactureId], references: [id])
  manufactureId Int?         @map("manufacture_id")

  // car   Car? @relation(fields: [carId], references: [id])
  // carId Int? @map("car_id")

  // make    Make?  @relation(fields: [makeId], references: [id])
  // makeId  Int?   @map("make_id")

  // model   Model? @relation(fields: [modelId], references: [id])
  // modelId Int?   @map("model_id")

  // year    Year?  @relation(fields: [yearId], references: [id])
  // yearId  Int?   @map("year_id")

  user    User?  @relation(fields: [userId], references: [id])
  userId  Int?   @map("user_id")
}

// model Car {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   make   Make? @relation(fields: [makeId], references: [id])
//   makeId Int? @map("make_)id")  
//   // model 
//   // year  

//   products Product[]
// }

// model Make {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   name String @unique

//   products Product[]
// }

// model Model {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   name String @unique

//   products Product[]
// }

// model Year {
//   id        Int      @id @default(autoincrement())
//   createdAt DateTime @default(now()) @map("created_at")
//   updatedAt DateTime @updatedAt @map("updated_at")

//   name String @unique

//   products Product[]
// }

model News {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  image       String
  title       String
  description String
  slug        String @unique
}

model Category {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Manufacture {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  name String @unique
  slug String @unique

  products Product[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // rating Int
  text String

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")
}

model Order {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  status EnumOrderStatus @default(PENDING)

  items OrderItem[]
  // total Int

  user   User @relation(fields: [userId], references: [id])
  userId Int  @map("user_id")
}

model OrderItem {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  quantity Int
  price    Int

  order   Order? @relation(fields: [orderId], references: [id])
  orderId Int?   @map("order_id")

  product   Product @relation(fields: [productId], references: [id])
  productId Int     @map("product_id")

  @@map("Order_item")
}

enum EnumOrderStatus {
  PENDING
  PAYED
  SHIPPED
  DELIVERED
}
